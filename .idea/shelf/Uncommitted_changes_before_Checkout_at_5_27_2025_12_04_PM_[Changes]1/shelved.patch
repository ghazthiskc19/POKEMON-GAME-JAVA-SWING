Index: MainUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.WindowAdapter;\r\nimport java.awt.event.WindowEvent;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport javax.swing.*;\r\n\r\npublic class MainUI {\r\n    public static void main(String[] args) {\r\n        new StartMenuUI();\r\n    }\r\n}\r\n\r\nclass BackgroundPanel extends JPanel {\r\n    private Image backgroundImage;\r\n\r\n    public BackgroundPanel(String path) {\r\n        try {\r\n            backgroundImage = new ImageIcon(path).getImage();\r\n        } catch (Exception e) {\r\n            System.out.println(\"Gagal load gambar: \" + path);\r\n        }\r\n        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        // Resize gambar agar memenuhi panel\r\n        g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);\r\n    }\r\n}\r\n\r\nclass StartMenuUI extends JFrame {\r\n    MusicPlayer musicPlayer;\r\n    List<Pokemon> allPokemons;\r\n    ArrayList<Pokemon> availablePokemon = new ArrayList<>();\r\n    Pokemon playerPokemon;\r\n    Pokemon enemyPokemon;\r\n    FadeEffectPanel fadeEffectPanel;\r\n    CardLayout cardLayout = new CardLayout();\r\n    JPanel wrapperPanel;\r\n    // _____________________________________-\r\n    JPanel startMenuPanel;\r\n    JPanel settingMenuPanel;\r\n\r\n    // _____________________________________-\r\n    // tampilin stats pemain di sisi kanan, arahin ke arena dan shop di sisi kiri\r\n    JPanel mainMenuPanel;\r\n    JPanel arenaPanel;\r\n    JPanel pokemonSelectionPanel;\r\n    JPanel pokemonShopPanel;\r\n\r\n    // Global Variable\r\n    Color textColor = new Color(21, 22, 21);\r\n    Color backgroundColor = new Color(181, 163, 91);\r\n    Font headerFont;\r\n    Font paragraphFont;\r\n\r\n    StartMenuUI() {\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setSize(800, 600);\r\n\r\n        setLocationRelativeTo(null);\r\n        setAssets();\r\n        setJPanel();\r\n        setStartMenuPanel();\r\n        setSettingMenuPanel();\r\n        setMainMenuPanel();\r\n        setPokemonSelectionPanel();\r\n        setShopPanel();\r\n        add(wrapperPanel);\r\n        setResizable(false);\r\n        fadeEffectPanel = new FadeEffectPanel();\r\n        fadeEffectPanel.setFadeColor(Color.BLACK);\r\n        fadeEffectPanel.setCurrentAlpha(1.0f);\r\n        setGlassPane(fadeEffectPanel);\r\n        fadeEffectPanel.setVisible(true);\r\n\r\n        musicPlayer.playMusic(MusicPlayer.MusicType.START_MENU);\r\n\r\n        addWindowListener(new WindowAdapter() {\r\n            @Override\r\n            public void windowClosing(WindowEvent e) {\r\n                if (musicPlayer != null) {\r\n                    musicPlayer.stopMusic();\r\n                }\r\n                super.windowClosing(e);\r\n            }\r\n        });\r\n\r\n        Runnable whenFadeComplete = () -> {\r\n        };\r\n        setVisible(true);\r\n        fadeEffectPanel.startFade(0.0f, 1500, whenFadeComplete);\r\n    }\r\n\r\n    private void setAssets() {\r\n        try {\r\n            File fontFile1 = new File(\"Assets/Font/Jersey10-Regular.ttf\");\r\n            File fontFile2 = new File(\"Assets/Font/PixelifySans-Medium.ttf\");\r\n            headerFont = Font.createFont(Font.TRUETYPE_FONT, fontFile1);\r\n            paragraphFont = Font.createFont(Font.TRUETYPE_FONT, fontFile2);\r\n            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\r\n            ge.registerFont(headerFont);\r\n            ge.registerFont(paragraphFont);\r\n        } catch (IOException | java.awt.FontFormatException e) {\r\n            e.printStackTrace();\r\n        }\r\n        musicPlayer = new MusicPlayer(\r\n                \"./Assets/Sound/BGM/start_menu_music.wav\",\r\n                \"./Assets/Sound/BGM/main_menu_music.wav\",\r\n                \"./Assets/Sound/BGM/arena_music.wav\");\r\n    }\r\n\r\n    private void setJPanel() {\r\n        wrapperPanel = new JPanel(cardLayout);\r\n\r\n        startMenuPanel = new BackgroundPanel(\"./Assets/bg-start.jpeg\");\r\n        settingMenuPanel = new JPanel();\r\n        mainMenuPanel = new BackgroundPanel(\"./Assets/bg-main.jpg\");\r\n        pokemonSelectionPanel = new BackgroundPanel(\"./Assets/bg-selection.jpg\");\r\n        // pokemonSelectionPanel = new JPanel();\r\n        pokemonSelectionPanel.setBackground(Color.RED);\r\n        arenaPanel = new BackgroundPanel(\"./Assets/bg-selection.jpg\");\r\n        pokemonShopPanel = new JPanel();\r\n\r\n        wrapperPanel.add(startMenuPanel, \"StartMenu\");\r\n        wrapperPanel.add(settingMenuPanel, \"SettingMenu\");\r\n        wrapperPanel.add(mainMenuPanel, \"MainMenu\");\r\n        wrapperPanel.add(pokemonSelectionPanel, \"PokemonSelection\");\r\n        wrapperPanel.add(arenaPanel, \"Arena\");\r\n        wrapperPanel.add(pokemonShopPanel, \"Shop\");\r\n    }\r\n\r\n    private void setStartMenuPanel() {\r\n        startMenuPanel.setLayout(new BoxLayout(startMenuPanel, BoxLayout.Y_AXIS));\r\n        // Bikin tombol-tombol\r\n        JButton startButton = new JButton(\"Start Game\");\r\n        JButton settingButton = new JButton(\"Settings\");\r\n        JButton exitButton = new JButton(\"Exit\");\r\n        JButton[] buttons = { startButton, settingButton, exitButton };\r\n        editButtonAll(buttons);\r\n        editButtonStart(buttons);\r\n\r\n        JPanel buttonGroup = new JPanel();\r\n        buttonGroup.setLayout(new BoxLayout(buttonGroup, BoxLayout.Y_AXIS));\r\n        buttonGroup.setOpaque(false);\r\n\r\n        startButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        settingButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n        exitButton.setAlignmentX(Component.CENTER_ALIGNMENT);\r\n\r\n        buttonGroup.add(startButton);\r\n        buttonGroup.add(Box.createRigidArea(new Dimension(0, 10)));\r\n        buttonGroup.add(settingButton);\r\n        buttonGroup.add(Box.createRigidArea(new Dimension(0, 10)));\r\n        buttonGroup.add(exitButton);\r\n\r\n        // Set ActionListener\r\n        startButton.addActionListener(e -> {\r\n            fadeEffectPanel.setFadeColor(Color.black);\r\n            fadeEffectPanel.setCurrentAlpha(0.0f);\r\n            fadeEffectPanel.setVisible(true);\r\n            Runnable H_afterFadeOut = () -> {\r\n                cardLayout.show(wrapperPanel, \"MainMenu\");\r\n                musicPlayer.playMusic(MusicPlayer.MusicType.MAIN_MENU);\r\n\r\n                Runnable H_afterFadeIn = () -> {\r\n\r\n                };\r\n                fadeEffectPanel.startFade(0.0f, 700, H_afterFadeIn);\r\n            };\r\n            fadeEffectPanel.startFade(1.0f, 700, H_afterFadeOut);\r\n        });\r\n\r\n        settingButton.addActionListener(e -> {\r\n            fadeEffectPanel.setFadeColor(Color.black);\r\n            fadeEffectPanel.setCurrentAlpha(0.0f);\r\n            fadeEffectPanel.setVisible(true);\r\n            Runnable H_afterFadeOut = () -> {\r\n                if (musicPlayer != null) {\r\n                    musicPlayer.stopMusic();\r\n                    cardLayout.show(wrapperPanel, \"SettingMenu\");\r\n                    System.exit(0);\r\n                    Runnable H_afterFadeIn = () -> {\r\n                    };\r\n                    fadeEffectPanel.startFade(0.0f, 700, H_afterFadeIn);\r\n                }\r\n                ;\r\n            };\r\n            fadeEffectPanel.startFade(1.0f, 700, H_afterFadeOut);\r\n        });\r\n        exitButton.addActionListener(e -> {\r\n            fadeEffectPanel.setFadeColor(Color.black);\r\n            fadeEffectPanel.setCurrentAlpha(0.0f);\r\n            fadeEffectPanel.setVisible(true);\r\n            Runnable H_afterFadeOut = () -> {\r\n                if (musicPlayer != null) {\r\n                    musicPlayer.stopMusic();\r\n                }\r\n                System.exit(0);\r\n                Runnable H_afterFadeIn = () -> {\r\n                };\r\n                fadeEffectPanel.startFade(0.0f, 700, H_afterFadeIn);\r\n            };\r\n            fadeEffectPanel.startFade(1.0f, 700, H_afterFadeOut);\r\n        });\r\n\r\n        // Glue atas bawah untuk vertical center\r\n        startMenuPanel.add(Box.createVerticalStrut(250));\r\n        startMenuPanel.add(Box.createVerticalGlue());\r\n        startMenuPanel.add(buttonGroup);\r\n        startMenuPanel.add(Box.createVerticalGlue());\r\n    }\r\n\r\n    private void setMainMenuPanel() {\r\n        mainMenuPanel.setLayout(new GridLayout(1, 2, 50, 50));\r\n        JPanel left = new JPanel();\r\n        JPanel right = new JPanel();\r\n        left.setOpaque(false);\r\n        right.setOpaque(false);\r\n\r\n        setLeftMainMenu(left);\r\n        setRightMainMenu(right);\r\n\r\n        mainMenuPanel.add(left);\r\n        mainMenuPanel.add(right);\r\n    }\r\n\r\n    private void setLeftMainMenu(JPanel left) {\r\n        left.setLayout(null);\r\n\r\n        left.setBackground(new Color(0, 0, 0, 127)); // alpha 127 = 50%\r\n        left.setOpaque(true);\r\n        // left.add(Box.createVerticalGlue());\r\n\r\n        JLabel playerName1 = new JLabel(\"Halo, \");\r\n        JLabel playerName2 = new JLabel(\"Siap bertarung?\");\r\n        JLabel currentMoney = new JLabel(\"Uang yang dimiliki : 0\");\r\n        JLabel currentCountPokemon = new JLabel(\"Jumlah Pokemon yang dimiliki : 0\");\r\n        JButton enterArena = new JButton(\"Let's Fight\");\r\n        JButton enterShop = new JButton(\"Shop\");\r\n        JButton exitToStartMenu = new JButton(\"Exit\");\r\n\r\n        JLabel[] Allteks = { playerName1, playerName2, currentMoney, currentCountPokemon };\r\n        JButton[] buttons = { enterArena, enterShop, exitToStartMenu };\r\n        editButtonAll(buttons);\r\n        editButtonMain(buttons);\r\n\r\n        for (JLabel teks : Allteks) {\r\n            left.add(teks);\r\n            teks.setForeground(Color.white);\r\n            teks.setFont(headerFont);\r\n        }\r\n        for (JButton jButton : buttons) {\r\n            left.add(jButton);\r\n            jButton.setForeground(Color.white);\r\n        }\r\n\r\n        playerName1.setBounds(20, 0, 350, 150);\r\n        playerName2.setBounds(20, 30, 350, 150);\r\n        currentMoney.setBounds(20, 30, 250, 250);\r\n        currentCountPokemon.setBounds(20, 50, 250, 250);\r\n        enterArena.setBounds(50, 250, 250, 50);\r\n        enterShop.setBounds(50, 325, 250, 50);\r\n        exitToStartMenu.setBounds(50, 400, 250, 50);\r\n        playerName1.setFont(headerFont.deriveFont(30f));\r\n        playerName2.setFont(headerFont.deriveFont(50f));\r\n        currentMoney.setFont(headerFont.deriveFont(18f));\r\n        currentCountPokemon.setFont(headerFont.deriveFont(18f));\r\n\r\n        left.add(Box.createVerticalGlue());\r\n        enterArena.addActionListener(e -> {\r\n            fadeEffectPanel.setFadeColor(Color.black);\r\n            fadeEffectPanel.setCurrentAlpha(0.0f);\r\n            fadeEffectPanel.setVisible(true);\r\n            Runnable H_afterFadeOut = () -> {\r\n                cardLayout.show(wrapperPanel, \"PokemonSelection\");\r\n                Runnable H_afterFadeIn = () -> {\r\n\r\n                };\r\n                fadeEffectPanel.startFade(0.0f, 700, H_afterFadeIn);\r\n            };\r\n            fadeEffectPanel.startFade(1.0f, 700, H_afterFadeOut);\r\n        });\r\n        enterShop.addActionListener(e -> {\r\n            cardLayout.show(wrapperPanel, \"Shop\");\r\n            musicPlayer.playMusic(MusicPlayer.MusicType.MAIN_MENU);\r\n        });\r\n        exitToStartMenu.addActionListener(e -> {\r\n            fadeEffectPanel.setFadeColor(Color.black);\r\n            fadeEffectPanel.setCurrentAlpha(0.0f);\r\n            fadeEffectPanel.setVisible(true);\r\n            Runnable H_afterFadeOut = () -> {\r\n                musicPlayer.playMusic(MusicPlayer.MusicType.START_MENU);\r\n                cardLayout.show(wrapperPanel, \"StartMenu\");\r\n\r\n                Runnable H_afterFadeIn = () -> {\r\n\r\n                };\r\n                fadeEffectPanel.startFade(0.0f, 700, H_afterFadeIn);\r\n            };\r\n            fadeEffectPanel.startFade(1.0f, 700, H_afterFadeOut);\r\n        });\r\n    }\r\n\r\n    private void setRightMainMenu(JPanel right) {\r\n        right.setLayout(new OverlayLayout(right));\r\n\r\n        JPanel pokemonWrapper = new JPanel(new FlowLayout());\r\n        pokemonWrapper.setOpaque(false);\r\n        int panelWidth = 300;\r\n        int panelHeight = 300;\r\n        JLabel imageBig = getScaledImageLabel(\"./Assets/Pokemon/Pikachu/raichu.png\", panelWidth, panelHeight);\r\n        imageBig.setText(\"Pokemon favorit adalah\");\r\n        imageBig.setFont(headerFont.deriveFont(18f));\r\n        imageBig.setVerticalTextPosition(JLabel.BOTTOM);\r\n        imageBig.setHorizontalTextPosition(JLabel.CENTER);\r\n        imageBig.setForeground(Color.white);\r\n\r\n        ImageIcon frontIcon = new ImageIcon(\"./Assets/Pokemon/Pikachu/raichu_front.gif\");\r\n        ImageIcon backIcon = new ImageIcon(\"./Assets/Pokemon/Pikachu/raichu_back.gif\");\r\n        JLabel image1 = new JLabel(frontIcon);\r\n        JLabel image2 = new JLabel(backIcon);\r\n        // JPanel pokemonWrapper = new JPanel(new BorderLayout());\r\n        pokemonWrapper.add(image1);\r\n        pokemonWrapper.add(image2);\r\n        pokemonWrapper.add(imageBig);\r\n\r\n        JPanel overlay = new JPanel();\r\n        overlay.setBackground(new Color(0, 0, 0, 127));\r\n        overlay.setOpaque(true);\r\n\r\n        right.add(pokemonWrapper); // gambar paling bawah\r\n        right.add(overlay); // transparan di atas gambar\r\n    }\r\n\r\n    private void setPokemonSelectionPanel() {\r\n        allPokemons = PokemonFactory.createAllPokemons();\r\n        pokemonSelectionPanel.setLayout(new GridBagLayout());\r\n        GridBagConstraints gbc = new GridBagConstraints();\r\n        gbc.gridx = 0;\r\n        // gbc.fill = GridBagConstraints.BOTH;\r\n        gbc.weightx = 1;\r\n\r\n        JPanel pokemonImage = new JPanel();\r\n        JPanel pokemonButton = new JPanel();\r\n        JPanel playExitButton = new JPanel();\r\n        pokemonImage.setBackground(new Color(0, 0, 0, 127));\r\n        pokemonButton.setOpaque(false);\r\n        playExitButton.setOpaque(false);\r\n\r\n        // Panel 1: Gambar (50%)\r\n        gbc.gridy = 0;\r\n        gbc.weighty = 0.5;\r\n        pokemonSelectionPanel.add(pokemonImage, gbc);\r\n\r\n        // Panel 2: Tombol Pokemon (30%)\r\n        gbc.gridy = 1;\r\n        gbc.weighty = 0.3;\r\n        pokemonSelectionPanel.add(pokemonButton, gbc);\r\n\r\n        // Panel 3: Play & Exit (20%)\r\n        gbc.gridy = 2;\r\n        gbc.weighty = 0.2;\r\n        pokemonSelectionPanel.add(playExitButton, gbc);\r\n\r\n        setPokemonButton(pokemonButton, pokemonImage);\r\n        setPlayExitButton(playExitButton);\r\n    }\r\n\r\n    private void setPokemonImage(JPanel pokemonImage, Pokemon pokemon) {\r\n        pokemonImage.removeAll();\r\n        pokemonImage.setLayout(new GridBagLayout());\r\n        GridBagConstraints gbc = new GridBagConstraints();\r\n        gbc.gridy = 0;\r\n        // gbc.fill = GridBagConstraints.BOTH;\r\n        gbc.weighty = 1;\r\n\r\n        // Panel kiri (gambar)\r\n        JPanel left = new JPanel(new GridBagLayout()); // Tengahin gambar\r\n        JLabel label = getScaledImageLabel(pokemon.getImagePath(), 300, 300);\r\n        label.setVerticalAlignment(JLabel.CENTER);\r\n        left.add(label);\r\n\r\n        gbc.gridx = 0;\r\n        gbc.weightx = 0.7;\r\n        pokemonImage.add(left, gbc);\r\n\r\n        // Panel kanan (statistik)\r\n        JPanel right = new JPanel();\r\n        right.setLayout(new BoxLayout(right, BoxLayout.Y_AXIS));\r\n        right.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n\r\n        JLabel nameLabel = new JLabel(\"Nama: \" + pokemon.getName());\r\n        JLabel typeLabel = new JLabel(\"Tipe: \" + pokemon.getType());\r\n        JLabel hpLabel = new JLabel(\"HP: \" + pokemon.getMaxHp());\r\n        JLabel attackLabel = new JLabel(\"Attack: \" + pokemon.getAttack());\r\n        JLabel defenseLabel = new JLabel(\"Defense: \" + pokemon.getDefense());\r\n        JLabel moveLabels = new JLabel(\"Moves:\");\r\n        JLabel[] labels = { nameLabel, typeLabel, hpLabel, attackLabel, defenseLabel, moveLabels };\r\n        for (JLabel jLabel : labels) {\r\n            jLabel.setFont(headerFont.deriveFont(20f));\r\n            jLabel.setForeground(Color.white);\r\n        }\r\n\r\n        left.setOpaque(false);\r\n        right.setOpaque(false);\r\n        right.add(nameLabel);\r\n        right.add(Box.createRigidArea(new Dimension(0, 5)));\r\n        right.add(typeLabel);\r\n        right.add(Box.createRigidArea(new Dimension(0, 5)));\r\n        right.add(hpLabel);\r\n        right.add(Box.createRigidArea(new Dimension(0, 5)));\r\n        right.add(attackLabel);\r\n        right.add(Box.createRigidArea(new Dimension(0, 5)));\r\n        right.add(defenseLabel);\r\n        right.add(Box.createRigidArea(new Dimension(0, 10)));\r\n        right.add(moveLabels);\r\n        for (Move move : pokemon.getMoves()) {\r\n            JLabel moveLabel = new JLabel(\"- \" + move.getName());\r\n            moveLabel.setForeground(Color.white);\r\n            moveLabel.setBackground(Color.red);\r\n            right.add(moveLabel);\r\n        }\r\n\r\n        // Bungkus right panel dengan panel vertikal-center\r\n        JPanel rightWrapper = new JPanel(new GridBagLayout());\r\n        rightWrapper.setOpaque(false);\r\n        GridBagConstraints gbcRight = new GridBagConstraints();\r\n        gbcRight.anchor = GridBagConstraints.CENTER;\r\n        gbcRight.gridy = 0;\r\n        gbcRight.weighty = 1;\r\n        gbcRight.fill = GridBagConstraints.NONE;\r\n        rightWrapper.add(right, gbcRight);\r\n\r\n        // Tambahkan ke pokemonImage\r\n        gbc.gridx = 1;\r\n        gbc.weightx = 0.3;\r\n        pokemonImage.add(rightWrapper, gbc);\r\n\r\n        // Refresh\r\n        pokemonImage.revalidate();\r\n        pokemonImage.repaint();\r\n    }\r\n\r\n    private void setPokemonButton(JPanel pokemonButton, JPanel pokemonImage) {\r\n        int i = 1;\r\n        for (Pokemon pokemon : allPokemons) {\r\n            if (i % 3 == 1) {\r\n                JButton btn = new JButton();\r\n                ImageIcon icon = new ImageIcon(pokemon.getFrontGifPath());\r\n                btn.setIcon(icon);\r\n                btn.setFocusable(false);\r\n                btn.setContentAreaFilled(false);\r\n                btn.setBorderPainted(false);\r\n                btn.setOpaque(false);\r\n                btn.setPreferredSize(new Dimension(175, 175));\r\n                pokemonButton.add(btn);\r\n                btn.addActionListener(e -> {\r\n                    setPokemonImage(pokemonImage, pokemon);\r\n                    playerPokemon = pokemon;\r\n                });\r\n                availablePokemon.add(pokemon);\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n\r\n    private void setPlayExitButton(JPanel playExitButton) {\r\n        JButton fight = new JButton(\"Let's Go!!\");\r\n        JButton exit = new JButton(\"Exit\");\r\n        JButton[] buttons = { fight, exit };\r\n        for (JButton jButton : buttons) {\r\n            jButton.setForeground(Color.white);\r\n        }\r\n        editButtonAll(buttons);\r\n\r\n        playExitButton.add(exit);\r\n        playExitButton.add(fight);\r\n        // Button actions\r\n        fight.addActionListener(e -> {\r\n            fadeEffectPanel.setFadeColor(Color.black);\r\n            fadeEffectPanel.setCurrentAlpha(0.0f);\r\n            fadeEffectPanel.setVisible(true);\r\n            Runnable H_afterFadeOut = () -> {\r\n                if (playerPokemon == null) {\r\n                    JOptionPane.showMessageDialog(this, \"Pilih Pokemon dulu, bro!\", \"Pokemon Belum Dipilih\",\r\n                            JOptionPane.WARNING_MESSAGE);\r\n                    return;\r\n                }\r\n                cardLayout.show(wrapperPanel, \"Arena\");\r\n                musicPlayer.playMusic(MusicPlayer.MusicType.ARENA);\r\n                setArenaPanel();\r\n                Runnable H_afterFadeIn = () -> {\r\n                };\r\n                fadeEffectPanel.startFade(0.0f, 700, H_afterFadeIn);\r\n            };\r\n            fadeEffectPanel.startFade(1.0f, 700, H_afterFadeOut);\r\n        });\r\n        exit.addActionListener(e -> {\r\n            fadeEffectPanel.setFadeColor(Color.black);\r\n            fadeEffectPanel.setCurrentAlpha(0.0f);\r\n            fadeEffectPanel.setVisible(true);\r\n            Runnable H_afterFadeOut = () -> {\r\n                cardLayout.show(wrapperPanel, \"MainMenu\");\r\n                musicPlayer.playMusic(MusicPlayer.MusicType.MAIN_MENU);\r\n                Runnable H_afterFadeIn = () -> {\r\n                };\r\n                fadeEffectPanel.startFade(0.0f, 700, H_afterFadeIn);\r\n            };\r\n            fadeEffectPanel.startFade(1.0f, 700, H_afterFadeOut);\r\n        });\r\n    }\r\n\r\n    private void setArenaPanel() {\r\n        Random rand = new Random();\r\n        enemyPokemon = availablePokemon.get(rand.nextInt(availablePokemon.size()));\r\n        if (playerPokemon == null || enemyPokemon == null) {\r\n            cardLayout.show(wrapperPanel, \"PokemonSelection\");\r\n            return;\r\n        }\r\n        new BattleUI(playerPokemon, enemyPokemon, arenaPanel, headerFont, cardLayout, wrapperPanel, musicPlayer,\r\n                fadeEffectPanel);\r\n    }\r\n\r\n    private void setSettingMenuPanel() {\r\n    }\r\n\r\n    private void setShopPanel() {\r\n    }\r\n\r\n    private void editButtonStart(JButton[] buttons) {\r\n        for (JButton jButton : buttons) {\r\n            jButton.setPreferredSize(new Dimension(150, 40));\r\n            jButton.setBackground(backgroundColor);\r\n            jButton.setForeground(textColor);\r\n        }\r\n    }\r\n\r\n    private void editButtonAll(JButton[] buttons) {\r\n        for (JButton jButton : buttons) {\r\n            jButton.setFocusable(false);\r\n            jButton.setFont(headerFont.deriveFont(30f));\r\n            jButton.setContentAreaFilled(false);\r\n            jButton.setBorderPainted(false);\r\n            jButton.setOpaque(false);\r\n        }\r\n    }\r\n\r\n    private void editButtonMain(JButton[] buttons) {\r\n        for (JButton jButton : buttons) {\r\n            jButton.setPreferredSize(new Dimension(150, 40));\r\n        }\r\n    }\r\n\r\n    private JLabel getScaledImageLabel(String imagePath, int panelWidth, int panelHeight) {\r\n        ImageIcon icon = new ImageIcon(imagePath);\r\n        Image image = icon.getImage();\r\n\r\n        // Resize gambar\r\n        Image scaledImage = image.getScaledInstance(panelWidth, panelHeight, Image.SCALE_SMOOTH);\r\n\r\n        // Bungkus ke JLabel\r\n        ImageIcon scaledIcon = new ImageIcon(scaledImage);\r\n        JLabel label = new JLabel(scaledIcon);\r\n\r\n        label.setHorizontalAlignment(SwingConstants.CENTER);\r\n        label.setVerticalAlignment(SwingConstants.CENTER);\r\n\r\n        return label;\r\n    }\r\n\r\n}\r\n\r\nclass BattleUI {\r\n    private MusicPlayer musicPlayer;\r\n    private Pokemon playerPokemon;\r\n    private Pokemon enemyPokemon;\r\n    private JPanel arenaPanel;\r\n    private JLabel playerLabel;\r\n    private JLabel enemyLabel;\r\n    private JLabel statusLabel;\r\n    private JPanel movesPanel;\r\n    private Font headerFont;\r\n    private JLabel playerHPLabel;\r\n    private JLabel enemyHPLabel;\r\n    private JButton backToMenuButton; // Tombol ini sudah ada dari saran sebelumnya\r\n    private JButton restartGameButton; // Tombol baru untuk \"Main Lagi\"\r\n\r\n    private CardLayout cardLayoutInstance;\r\n    private JPanel wrapperPanelInstance;\r\n    private FadeEffectPanel fadeEffectPanel;\r\n\r\n    public BattleUI(Pokemon playerPokemon, Pokemon enemyPokemon, JPanel arenaPanel, Font headerFont,\r\n            CardLayout cardLayout, JPanel wrapperPanel, MusicPlayer musicPlayer, FadeEffectPanel fadeEffectPanel) {\r\n        this.playerPokemon = playerPokemon;\r\n        this.enemyPokemon = enemyPokemon;\r\n        this.arenaPanel = arenaPanel;\r\n        this.headerFont = headerFont;\r\n        this.cardLayoutInstance = cardLayout; // Penting\r\n        this.wrapperPanelInstance = wrapperPanel; // Penting\r\n        this.musicPlayer = musicPlayer;\r\n        this.fadeEffectPanel = fadeEffectPanel;\r\n        this.playerPokemon.resetHp(); // Pastikan method resetHp() ada di Pokemon.java\r\n        this.enemyPokemon.resetHp(); // Pastikan method resetHp() ada di Pokemon.java\r\n\r\n        initializeUI();\r\n    }\r\n\r\n    private void initializeUI() {\r\n        arenaPanel.removeAll();\r\n        arenaPanel.setLayout(null);\r\n        backToMenuButton = new JButton(\"Kembali ke Menu Utama\");\r\n        backToMenuButton.setFont(headerFont.deriveFont(16f));\r\n        backToMenuButton.setBounds(50, 50, 250, 40);\r\n        backToMenuButton.setVisible(false);\r\n        backToMenuButton.addActionListener(e -> {\r\n            if (cardLayoutInstance != null && wrapperPanelInstance != null) {\r\n                fadeEffectPanel.setFadeColor(Color.black);\r\n                fadeEffectPanel.setCurrentAlpha(0.0f);\r\n                fadeEffectPanel.setVisible(true);\r\n                Runnable H_afterFadeOut = () -> {\r\n                    cardLayoutInstance.show(wrapperPanelInstance, \"MainMenu\");\r\n                    musicPlayer.playMusic(MusicPlayer.MusicType.MAIN_MENU);\r\n                    Runnable H_afterFadeIn = () -> {\r\n                    };\r\n                    fadeEffectPanel.startFade(0.0f, 700, H_afterFadeIn);\r\n                };\r\n                fadeEffectPanel.startFade(1.0f, 700, H_afterFadeOut);\r\n            }\r\n        });\r\n        restartGameButton = new JButton(\"Main Lagi (Pilih Ulang)\");\r\n        if (headerFont != null)\r\n            restartGameButton.setFont(headerFont.deriveFont(16f));\r\n        restartGameButton.setBounds(backToMenuButton.getX(),\r\n                backToMenuButton.getY() + backToMenuButton.getHeight() + 10, 250, 40); // Y disesuaikan\r\n        restartGameButton.setVisible(false);\r\n        restartGameButton.addActionListener(e -> {\r\n            if (cardLayoutInstance != null && wrapperPanelInstance != null) {\r\n                fadeEffectPanel.setFadeColor(Color.black);\r\n                fadeEffectPanel.setCurrentAlpha(0.0f);\r\n                fadeEffectPanel.setVisible(true);\r\n                Runnable H_afterFadeOut = () -> {\r\n                    cardLayoutInstance.show(wrapperPanelInstance, \"PokemonSelection\");\r\n                    musicPlayer.playMusic(MusicPlayer.MusicType.MAIN_MENU);\r\n                    Runnable H_afterFadeIn = () -> {\r\n                    };\r\n                    fadeEffectPanel.startFade(0.0f, 700, H_afterFadeIn);\r\n                };\r\n                fadeEffectPanel.startFade(1.0f, 700, H_afterFadeOut);\r\n            }\r\n        });\r\n        arenaPanel.add(restartGameButton);\r\n        arenaPanel.add(backToMenuButton);\r\n        // Player Pokemon GIF\r\n        ImageIcon playerIcon = new ImageIcon(playerPokemon.getBackGifPath());\r\n        playerLabel = new JLabel(playerIcon);\r\n        playerLabel.setBounds(50, 350, 200, 200);\r\n        arenaPanel.add(playerLabel);\r\n\r\n        // Enemy Pokemon GIF\r\n        ImageIcon enemyIcon = new ImageIcon(enemyPokemon.getFrontGifPath());\r\n        enemyLabel = new JLabel(enemyIcon);\r\n        enemyLabel.setBounds(500, 50, 200, 200);\r\n        arenaPanel.add(enemyLabel);\r\n\r\n        // Player HP Label\r\n        playerHPLabel = new JLabel();\r\n        playerHPLabel.setFont(headerFont.deriveFont(20f));\r\n        playerHPLabel.setForeground(Color.WHITE); // Warna teks HP\r\n        playerHPLabel.setBounds(75, 350, 200, 30);\r\n        arenaPanel.add(playerHPLabel);\r\n\r\n        // Enemy HP Label\r\n        enemyHPLabel = new JLabel();\r\n        enemyHPLabel.setFont(headerFont.deriveFont(20f));\r\n        enemyHPLabel.setForeground(Color.WHITE); // Warna teks HP\r\n        enemyHPLabel.setBounds(550, 50, 200, 30);\r\n        arenaPanel.add(enemyHPLabel);\r\n\r\n        updateHealthDisplay();\r\n\r\n        // Status Label\r\n        statusLabel = new JLabel(\"Battle Start!\");\r\n        statusLabel.setFont(headerFont.deriveFont(20f));\r\n        statusLabel.setForeground(Color.WHITE);\r\n        statusLabel.setHorizontalAlignment(SwingConstants.CENTER);\r\n        statusLabel.setBounds(arenaPanel.getWidth() / 2 - 125, 10, 250, 30); // Tengah atas\r\n        arenaPanel.add(statusLabel);\r\n\r\n        // Moves Panel\r\n        movesPanel = new JPanel();\r\n        movesPanel.setBounds(arenaPanel.getWidth() / 2 - 125, arenaPanel.getHeight() - 120, 250, 100);\r\n        movesPanel.setLayout(new GridLayout(2, 2, 5, 5));\r\n        movesPanel.setOpaque(false);\r\n        arenaPanel.add(movesPanel);\r\n\r\n        for (Move move : playerPokemon.getMoves()) {\r\n            JButton moveButton = new JButton(move.getName());\r\n            moveButton.setFont(headerFont.deriveFont(18f));\r\n            moveButton.addActionListener(e -> performPlayerMove(move));\r\n            movesPanel.add(moveButton);\r\n        }\r\n\r\n        JLabel enemyPlace = getScaledImageLabel(\"./Assets/pixil-frame.png\", 200, 200);\r\n        JLabel playerPlace = getScaledImageLabel(\"./Assets/pixil-frame.png\", 200, 200);\r\n        enemyPlace.setBounds(500, 100, 200, 200);\r\n        playerPlace.setBounds(50, 400, 200, 200);\r\n        arenaPanel.add(enemyPlace);\r\n        arenaPanel.add(playerPlace);\r\n\r\n        arenaPanel.revalidate();\r\n        arenaPanel.repaint();\r\n    }\r\n\r\n    private void updateHealthDisplay() {\r\n        if (playerPokemon != null && playerHPLabel != null) {\r\n            playerHPLabel.setText(\r\n                    playerPokemon.getName() + \": \" + playerPokemon.getCurrentHp() + \"/\" + playerPokemon.getMaxHp());\r\n        }\r\n        if (enemyPokemon != null && enemyHPLabel != null) {\r\n            enemyHPLabel.setText(\r\n                    enemyPokemon.getName() + \": \" + enemyPokemon.getCurrentHp() + \"/\" + enemyPokemon.getMaxHp());\r\n        }\r\n    }\r\n\r\n    private void performPlayerMove(Move move) {\r\n        setMoveButtonsEnabled(false);\r\n        statusLabel.setText(playerPokemon.getName() + \" used \" + move.getName() + \"!\");\r\n\r\n        if (move.getSfxPath() != null && !move.getSfxPath().isEmpty()) {\r\n            SFXPlayer.playSound(move.getSfxPath()); // <-- PANGGIL SFX DI SINI\r\n        }\r\n        // Tentukan target animasi dan Pokemon defender\r\n        JLabel targetLabelForAnimation = enemyLabel; // Default untuk serangan\r\n        Pokemon defender = enemyPokemon;\r\n        Pokemon attacker = playerPokemon;\r\n\r\n        // Jika move adalah HEAL atau BUFF yang targetnya diri sendiri\r\n        if (move.getType() == Type.HEAL || move.getType() == Type.BUFF) {\r\n            targetLabelForAnimation = playerLabel; // Animasi di dekat pengguna move\r\n        }\r\n\r\n        int animX = targetLabelForAnimation.getX();\r\n        int animY = targetLabelForAnimation.getY();\r\n\r\n        showMoveAnimation(move.getGifPath(), animX, animY, () -> {\r\n            boolean turnEnds = true; // Asumsi giliran berakhir setelah aksi\r\n            if (move.getType() == Type.HEAL) {\r\n                attacker.heal(move.getPower());\r\n                statusLabel.setText(attacker.getName() + \" healed itself for \" + move.getPower() + \" HP!\");\r\n                updateHealthDisplay();\r\n            } else if (move.getType() == Type.BUFF) {\r\n                // Untuk Buff, kita tentukan efeknya berdasarkan nama move (untuk sementara)\r\n                // Atau bisa juga berdasarkan sub-tipe buff jika ada\r\n                if (move.getName().equalsIgnoreCase(\"Buff\")) { // Asumsi \"Buff\" meningkatkan Attack\r\n                    attacker.increaseAttackBonus(move.getPower());\r\n                    statusLabel.setText(attacker.getName() + \"'s Attack rose by \" + move.getPower() + \"!\");\r\n                } else if (move.getName().equalsIgnoreCase(\"Withdraw\")) { // Contoh untuk Defense Buff\r\n                    // Jika \"Withdraw\" adalah Type.BUFF dan powernya untuk defense\r\n                    attacker.increaseDefenseBonus(move.getPower());\r\n                    statusLabel.setText(attacker.getName() + \"'s Defense rose by \" + move.getPower() + \"!\");\r\n                } else {\r\n                    // Default buff (misalnya, jika ada move buff lain tanpa nama spesifik)\r\n                    attacker.increaseAttackBonus(move.getPower()); // Default ke attack\r\n                    statusLabel.setText(attacker.getName() + \" powered up!\");\r\n                }\r\n                // Tidak ada updateHealthDisplay() kecuali buff juga heal\r\n            } else { // Ini adalah move serangan (damaging move)\r\n                int damage = Battle.calculateDamage(attacker, move, defender);\r\n                defender.takeDamage(damage);\r\n                statusLabel.setText(attacker.getName() + \" dealt \" + damage + \" damage to \" + defender.getName() + \"!\");\r\n                updateHealthDisplay();\r\n\r\n                if (defender.isFainted()) {\r\n                    statusLabel.setText(defender.getName() + \" fainted! \" + attacker.getName() + \" wins!\");\r\n                    setMoveButtonsEnabled(false);\r\n                    backToMenuButton.setVisible(true);\r\n                    restartGameButton.setVisible(true);\r\n                    turnEnds = false; // Pertarungan selesai, tidak ada giliran musuh\r\n                }\r\n            }\r\n\r\n            if (turnEnds && !defender.isFainted()) { // Hanya lanjut ke giliran musuh jika battle belum berakhir\r\n                Timer enemyTurnTimer = new Timer(1500, ae -> performEnemyMove()); // Tambah delay sedikit\r\n                enemyTurnTimer.setRepeats(false);\r\n                enemyTurnTimer.start();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void performEnemyMove() {\r\n        statusLabel.setText(enemyPokemon.getName() + \"'s turn...\");\r\n        Move move = enemyPokemon.getMoves().get((int) (Math.random() * enemyPokemon.getMoves().size()));\r\n\r\n        // Mirip dengan player, tentukan target animasi\r\n        JLabel targetLabelForAnimation = playerLabel; // Default untuk serangan\r\n        Pokemon defender = playerPokemon;\r\n        Pokemon attacker = enemyPokemon;\r\n\r\n        if (move.getType() == Type.HEAL || move.getType() == Type.BUFF) {\r\n            targetLabelForAnimation = enemyLabel; // Animasi di dekat pengguna move\r\n        }\r\n\r\n        int animX = targetLabelForAnimation.getX();\r\n        int animY = targetLabelForAnimation.getY();\r\n        Timer actionDelayTimer = new Timer(1000, actionEvent -> {\r\n            statusLabel.setText(attacker.getName() + \" used \" + move.getName() + \"!\");\r\n            if (move.getSfxPath() != null && !move.getSfxPath().isEmpty()) {\r\n                SFXPlayer.playSound(move.getSfxPath()); // <-- PANGGIL SFX DI SINI\r\n            }\r\n            showMoveAnimation(move.getGifPath(), animX, animY, () -> {\r\n                boolean turnEnds = true;\r\n\r\n                if (move.getType() == Type.HEAL) {\r\n                    attacker.heal(move.getPower());\r\n                    statusLabel.setText(attacker.getName() + \" healed itself for \" + move.getPower() + \" HP!\");\r\n                    updateHealthDisplay();\r\n                } else if (move.getType() == Type.BUFF) {\r\n                    if (move.getName().equalsIgnoreCase(\"Buff\")) {\r\n                        attacker.increaseAttackBonus(move.getPower());\r\n                        statusLabel.setText(attacker.getName() + \"'s Attack rose by \" + move.getPower() + \"!\");\r\n                    } else if (move.getName().equalsIgnoreCase(\"Withdraw\")) {\r\n                        attacker.increaseDefenseBonus(move.getPower());\r\n                        statusLabel.setText(attacker.getName() + \"'s Defense rose by \" + move.getPower() + \"!\");\r\n                    } else {\r\n                        attacker.increaseAttackBonus(move.getPower());\r\n                        statusLabel.setText(attacker.getName() + \" powered up!\");\r\n                    }\r\n                } else { // Damaging move\r\n                    int damage = Battle.calculateDamage(attacker, move, defender);\r\n                    defender.takeDamage(damage);\r\n                    statusLabel.setText(\r\n                            attacker.getName() + \" dealt \" + damage + \" damage to \" + defender.getName() + \"!\");\r\n                    updateHealthDisplay();\r\n\r\n                    if (defender.isFainted()) {\r\n                        statusLabel.setText(defender.getName() + \" fainted! \" + attacker.getName() + \" wins!\");\r\n                        setMoveButtonsEnabled(false); // Tombol player tetap mati\r\n                        backToMenuButton.setVisible(true);\r\n                        restartGameButton.setVisible(true);\r\n                        turnEnds = false;\r\n                    }\r\n                }\r\n\r\n                if (turnEnds && !defender.isFainted()) {\r\n                    setMoveButtonsEnabled(true); // Aktifkan tombol player untuk giliran berikutnya\r\n                    statusLabel.setText(\"Your turn!\");\r\n                }\r\n            });\r\n        });\r\n        actionDelayTimer.setRepeats(false);\r\n        actionDelayTimer.start();\r\n    }\r\n\r\n    private void showMoveAnimation(String gifPath, int x, int y, Runnable onAnimationEnd) {\r\n        if (gifPath == null || gifPath.isEmpty()) {\r\n            System.out.println(\"Move GIF path is empty, skipping animation.\");\r\n            if (onAnimationEnd != null) {\r\n                onAnimationEnd.run();\r\n            }\r\n            return;\r\n        }\r\n\r\n        ImageIcon moveIcon = new ImageIcon(gifPath);\r\n        JLabel moveLabel = new JLabel(moveIcon);\r\n        moveLabel.setBounds(x, y, moveIcon.getIconWidth(), moveIcon.getIconHeight());\r\n\r\n        arenaPanel.add(moveLabel);\r\n        arenaPanel.setComponentZOrder(moveLabel, 0);\r\n        arenaPanel.repaint();\r\n\r\n        Timer timer = new Timer(1500, new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                arenaPanel.remove(moveLabel);\r\n                arenaPanel.repaint();\r\n                if (onAnimationEnd != null) {\r\n                    onAnimationEnd.run();\r\n                }\r\n            }\r\n        });\r\n        timer.setRepeats(false);\r\n        timer.start();\r\n    }\r\n\r\n    private void setMoveButtonsEnabled(boolean enabled) {\r\n        for (Component comp : movesPanel.getComponents()) {\r\n            if (comp instanceof JButton) {\r\n                comp.setEnabled(enabled);\r\n            }\r\n        }\r\n    }\r\n\r\n    private JLabel getScaledImageLabel(String imagePath, int panelWidth, int panelHeight) {\r\n        ImageIcon icon = new ImageIcon(imagePath);\r\n        Image image = icon.getImage();\r\n\r\n        // Resize gambar\r\n        Image scaledImage = image.getScaledInstance(panelWidth, panelHeight, Image.SCALE_SMOOTH);\r\n\r\n        // Bungkus ke JLabel\r\n        ImageIcon scaledIcon = new ImageIcon(scaledImage);\r\n        JLabel label = new JLabel(scaledIcon);\r\n\r\n        label.setHorizontalAlignment(SwingConstants.CENTER);\r\n        label.setVerticalAlignment(SwingConstants.CENTER);\r\n\r\n        return label;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MainUI.java b/MainUI.java
--- a/MainUI.java	(revision 1bd8b5145d8efa880410d819e3b66da973d2120b)
+++ b/MainUI.java	(date 1748281810780)
@@ -55,6 +55,7 @@
     JPanel arenaPanel;
     JPanel pokemonSelectionPanel;
     JPanel pokemonShopPanel;
+    JPanel nameInputPanel;
 
     // Global Variable
     Color textColor = new Color(21, 22, 21);
@@ -74,6 +75,8 @@
         setMainMenuPanel();
         setPokemonSelectionPanel();
         setShopPanel();
+        setNameInputPanel();
+        wrapperPanel.add(nameInputPanel, "NameInput");
         add(wrapperPanel);
         setResizable(false);
         fadeEffectPanel = new FadeEffectPanel();
@@ -100,6 +103,84 @@
         fadeEffectPanel.startFade(0.0f, 1500, whenFadeComplete);
     }
 
+    private void setNameInputPanel() {
+        nameInputPanel = new BackgroundPanel("./Assets/bg-start.jpeg");
+        nameInputPanel.setLayout(new BoxLayout(nameInputPanel, BoxLayout.Y_AXIS));
+
+        // Spacer atas besar (sesuaikan dengan posisi logo)
+        nameInputPanel.add(Box.createVerticalStrut(350));
+
+        // Title
+        JLabel titleLabel = new JLabel("Fill Your Nickname!");
+        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
+        titleLabel.setFont(headerFont.deriveFont(24f));
+        titleLabel.setForeground(Color.WHITE);
+        nameInputPanel.add(titleLabel);
+
+        // Spacer antara title dan textfield
+        nameInputPanel.add(Box.createRigidArea(new Dimension(0, 5)));
+
+        // TextField dengan center alignment
+        JTextField nameField = new JTextField(15);
+        nameField.setMaximumSize(new Dimension(200, 40));
+        nameField.setAlignmentX(Component.CENTER_ALIGNMENT);
+        nameField.setFont(paragraphFont.deriveFont(24f));
+        nameInputPanel.add(nameField);
+
+        // Spacer antara textfield dan button
+        nameInputPanel.add(Box.createRigidArea(new Dimension(0, 20)));
+
+        // Submit Button
+        JButton submitButton = new JButton("Submit");
+        submitButton.setAlignmentX(Component.CENTER_ALIGNMENT);
+        submitButton.setPreferredSize(new Dimension(200, 40));
+        submitButton.setFont(headerFont.deriveFont(24f));
+        submitButton.setBackground(new Color(34, 139, 34));
+        submitButton.setForeground(Color.WHITE);
+        nameInputPanel.add(submitButton);
+
+        // Spacer bawah
+        nameInputPanel.add(Box.createVerticalGlue());
+
+        submitButton.addActionListener(e -> {
+            String name = nameField.getText().trim();
+            if (!name.isEmpty()) {
+                PlayerData.savePlayerName(name);
+                proceedToMainMenu();
+            }
+        });
+    }
+
+    private void proceedToMainMenu() {
+        fadeEffectPanel.setFadeColor(Color.black);
+        fadeEffectPanel.setCurrentAlpha(0.0f);
+        fadeEffectPanel.setVisible(true);
+        Runnable afterFadeOut = () -> {
+            cardLayout.show(wrapperPanel, "MainMenu");
+            musicPlayer.playMusic(MusicPlayer.MusicType.MAIN_MENU);
+            updatePlayerNameInUI();
+            Runnable afterFadeIn = () -> {};
+            fadeEffectPanel.startFade(0.0f, 700, afterFadeIn);
+        };
+        fadeEffectPanel.startFade(1.0f, 700, afterFadeOut);
+    }
+
+    private void updatePlayerNameInUI() {
+        // Update UI dengan nama pemain
+        Component[] components = mainMenuPanel.getComponents();
+        for (Component comp : components) {
+            if (comp instanceof JPanel) {
+                Component[] subComps = ((JPanel)comp).getComponents();
+                for (Component subComp : subComps) {
+                    if (subComp instanceof JLabel && ((JLabel)subComp).getText().startsWith("Halo, ")) {
+                        String savedName = PlayerData.getPlayerName();
+                        ((JLabel)subComp).setText("Halo, " + (savedName != null ? savedName : "Trainer"));
+                    }
+                }
+            }
+        }
+    }
+
     private void setAssets() {
         try {
             File fontFile1 = new File("Assets/Font/Jersey10-Regular.ttf");
@@ -168,12 +249,13 @@
             fadeEffectPanel.setCurrentAlpha(0.0f);
             fadeEffectPanel.setVisible(true);
             Runnable H_afterFadeOut = () -> {
-                cardLayout.show(wrapperPanel, "MainMenu");
-                musicPlayer.playMusic(MusicPlayer.MusicType.MAIN_MENU);
-
-                Runnable H_afterFadeIn = () -> {
-
-                };
+                if (PlayerData.hasPlayerName()) {
+                    cardLayout.show(wrapperPanel, "MainMenu");
+                    musicPlayer.playMusic(MusicPlayer.MusicType.MAIN_MENU);
+                } else {
+                    cardLayout.show(wrapperPanel, "NameInput");
+                }
+                Runnable H_afterFadeIn = () -> {};
                 fadeEffectPanel.startFade(0.0f, 700, H_afterFadeIn);
             };
             fadeEffectPanel.startFade(1.0f, 700, H_afterFadeOut);
@@ -235,21 +317,23 @@
 
     private void setLeftMainMenu(JPanel left) {
         left.setLayout(null);
-
         left.setBackground(new Color(0, 0, 0, 127)); // alpha 127 = 50%
         left.setOpaque(true);
-        // left.add(Box.createVerticalGlue());
 
-        JLabel playerName1 = new JLabel("Halo, ");
+        String savedName = PlayerData.getPlayerName();
+        JLabel playerName1 = new JLabel("Halo, " + (savedName != null ? savedName : "Trainer"));
         JLabel playerName2 = new JLabel("Siap bertarung?");
         JLabel currentMoney = new JLabel("Uang yang dimiliki : 0");
         JLabel currentCountPokemon = new JLabel("Jumlah Pokemon yang dimiliki : 0");
+
         JButton enterArena = new JButton("Let's Fight");
         JButton enterShop = new JButton("Shop");
         JButton exitToStartMenu = new JButton("Exit");
+        JButton logoutButton = new JButton("Reset Akun");
 
         JLabel[] Allteks = { playerName1, playerName2, currentMoney, currentCountPokemon };
-        JButton[] buttons = { enterArena, enterShop, exitToStartMenu };
+        JButton[] buttons = { enterArena, enterShop, exitToStartMenu, logoutButton };
+
         editButtonAll(buttons);
         editButtonMain(buttons);
 
@@ -258,6 +342,7 @@
             teks.setForeground(Color.white);
             teks.setFont(headerFont);
         }
+
         for (JButton jButton : buttons) {
             left.add(jButton);
             jButton.setForeground(Color.white);
@@ -270,29 +355,31 @@
         enterArena.setBounds(50, 250, 250, 50);
         enterShop.setBounds(50, 325, 250, 50);
         exitToStartMenu.setBounds(50, 400, 250, 50);
+        logoutButton.setBounds(50, 475, 250, 50); // Tombol Logout paling bawah
+
         playerName1.setFont(headerFont.deriveFont(30f));
         playerName2.setFont(headerFont.deriveFont(50f));
         currentMoney.setFont(headerFont.deriveFont(18f));
         currentCountPokemon.setFont(headerFont.deriveFont(18f));
 
         left.add(Box.createVerticalGlue());
+
         enterArena.addActionListener(e -> {
             fadeEffectPanel.setFadeColor(Color.black);
             fadeEffectPanel.setCurrentAlpha(0.0f);
             fadeEffectPanel.setVisible(true);
             Runnable H_afterFadeOut = () -> {
                 cardLayout.show(wrapperPanel, "PokemonSelection");
-                Runnable H_afterFadeIn = () -> {
-
-                };
-                fadeEffectPanel.startFade(0.0f, 700, H_afterFadeIn);
+                fadeEffectPanel.startFade(0.0f, 700, () -> {});
             };
             fadeEffectPanel.startFade(1.0f, 700, H_afterFadeOut);
         });
+
         enterShop.addActionListener(e -> {
             cardLayout.show(wrapperPanel, "Shop");
             musicPlayer.playMusic(MusicPlayer.MusicType.MAIN_MENU);
         });
+
         exitToStartMenu.addActionListener(e -> {
             fadeEffectPanel.setFadeColor(Color.black);
             fadeEffectPanel.setCurrentAlpha(0.0f);
@@ -300,15 +387,18 @@
             Runnable H_afterFadeOut = () -> {
                 musicPlayer.playMusic(MusicPlayer.MusicType.START_MENU);
                 cardLayout.show(wrapperPanel, "StartMenu");
-
-                Runnable H_afterFadeIn = () -> {
-
-                };
-                fadeEffectPanel.startFade(0.0f, 700, H_afterFadeIn);
+                fadeEffectPanel.startFade(0.0f, 700, () -> {});
             };
             fadeEffectPanel.startFade(1.0f, 700, H_afterFadeOut);
         });
+
+        logoutButton.addActionListener(e -> {
+            PlayerData.clearPlayerName();
+            musicPlayer.playMusic(MusicPlayer.MusicType.START_MENU);
+            cardLayout.show(wrapperPanel, "NameInput");
+        });
     }
+
 
     private void setRightMainMenu(JPanel right) {
         right.setLayout(new OverlayLayout(right));
@@ -531,6 +621,48 @@
     }
 
     private void setSettingMenuPanel() {
+        settingMenuPanel = new BackgroundPanel("./Assets/bg-start.jpeg");
+        settingMenuPanel.setLayout(new BoxLayout(settingMenuPanel, BoxLayout.Y_AXIS));
+
+        JButton changeNameButton = new JButton("Change Name");
+        JButton backButton = new JButton("Back to Main Menu");
+        JButton[] buttons = { changeNameButton, backButton };
+        editButtonAll(buttons);
+
+        changeNameButton.setAlignmentX(Component.CENTER_ALIGNMENT);
+        backButton.setAlignmentX(Component.CENTER_ALIGNMENT);
+
+        settingMenuPanel.add(Box.createVerticalGlue());
+        settingMenuPanel.add(changeNameButton);
+        settingMenuPanel.add(Box.createRigidArea(new Dimension(0, 20)));
+        settingMenuPanel.add(backButton);
+        settingMenuPanel.add(Box.createVerticalGlue());
+
+        changeNameButton.addActionListener(e -> {
+            PlayerData.clearPlayerName();
+            fadeEffectPanel.setFadeColor(Color.black);
+            fadeEffectPanel.setCurrentAlpha(0.0f);
+            fadeEffectPanel.setVisible(true);
+            Runnable afterFadeOut = () -> {
+                cardLayout.show(wrapperPanel, "NameInput");
+                Runnable afterFadeIn = () -> {};
+                fadeEffectPanel.startFade(0.0f, 700, afterFadeIn);
+            };
+            fadeEffectPanel.startFade(1.0f, 700, afterFadeOut);
+        });
+
+        backButton.addActionListener(e -> {
+            fadeEffectPanel.setFadeColor(Color.black);
+            fadeEffectPanel.setCurrentAlpha(0.0f);
+            fadeEffectPanel.setVisible(true);
+            Runnable afterFadeOut = () -> {
+                cardLayout.show(wrapperPanel, "MainMenu");
+                musicPlayer.playMusic(MusicPlayer.MusicType.MAIN_MENU);
+                Runnable afterFadeIn = () -> {};
+                fadeEffectPanel.startFade(0.0f, 700, afterFadeIn);
+            };
+            fadeEffectPanel.startFade(1.0f, 700, afterFadeOut);
+        });
     }
 
     private void setShopPanel() {
